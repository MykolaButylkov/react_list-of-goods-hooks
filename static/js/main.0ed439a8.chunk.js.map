{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","NONE","sortType","setSortBy","isReversed","setIsReversed","isResetButton","visibleGoods","ALPHABET","sort","a","b","localeCompare","toString","LENGTH","length","RESET","reverse","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,mEAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,mBAAAA,I,kBAAAA,M,KAOE,IAAME,EAAgB,WAC3B,MAA8BC,mBAASH,EAASI,MAAhD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KACIC,GAAgB,EAEhBC,EAAY,UAAOT,GAEvB,OAAQI,GACN,KAAKL,EAASI,KACZK,GAAgB,EAChB,MAEF,KAAKT,EAASW,SACZD,EAAeA,EAAaE,MAC1B,SAACC,EAAGC,GAAJ,OAAWD,EAAEE,cAAcD,EAAEE,eAG/BP,GAAgB,EAChB,MAEF,KAAKT,EAASiB,OACZP,EAAeA,EAAaE,MAC1B,SAACC,EAAGC,GAAJ,OAAWD,EAAEK,OAASJ,EAAEI,UAE1BT,GAAgB,EAChB,MAEF,KAAKT,EAASmB,MACZT,EAAY,UAAOT,GACnBQ,GAAgB,EAYpB,OALIF,IACFG,EAAaU,UACbX,GAAgB,GAIhB,sBAAKY,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UACEE,IACE,SACA,UACA,CAAE,WAAYlB,IAAaL,EAASW,WAGxCa,QAAS,kBAAMlB,EAAUN,EAASW,WATpC,iCAcA,wBACEW,KAAK,SACLD,UACEE,IACE,SACA,aACA,CAAE,WAAYlB,IAAaL,EAASiB,SAGxCO,QAAS,kBAAMlB,EAAUN,EAASiB,SATpC,4BAcA,wBACEK,KAAK,SACLD,UACEE,IACE,SACA,aACA,CAAE,YAAahB,IAGnBiB,QAAS,kBAAMhB,GAAeD,IAThC,qBAcCE,GACC,wBACEa,KAAK,SACLD,UAAU,4BACVG,QAAS,WACPlB,EAAUN,EAASmB,OACnBX,GAAc,IALlB,sBAcJ,6BACE,6BACGE,EAAae,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,cC9HpCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.0ed439a8.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n  RESET,\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setSortBy] = useState(SortType.NONE);\n  const [isReversed, setIsReversed] = useState(false);\n  let isResetButton = false;\n\n  let visibleGoods = [...goodsFromServer];\n\n  switch (sortType) {\n    case SortType.NONE:\n      isResetButton = false;\n      break;\n\n    case SortType.ALPHABET:\n      visibleGoods = visibleGoods.sort(\n        (a, b) => (a.localeCompare(b.toString())\n        ),\n      );\n      isResetButton = true;\n      break;\n\n    case SortType.LENGTH:\n      visibleGoods = visibleGoods.sort(\n        (a, b) => (a.length - b.length),\n      );\n      isResetButton = true;\n      break;\n\n    case SortType.RESET:\n      visibleGoods = [...goodsFromServer];\n      isResetButton = false;\n      break;\n\n    default:\n      break;\n  }\n\n  if (isReversed) {\n    visibleGoods.reverse();\n    isResetButton = true;\n  }\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={\n            cn(\n              'button',\n              'is-info',\n              { 'is-light': sortType !== SortType.ALPHABET },\n            )\n          }\n          onClick={() => setSortBy(SortType.ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            cn(\n              'button',\n              'is-success',\n              { 'is-light': sortType !== SortType.LENGTH },\n            )\n          }\n          onClick={() => setSortBy(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            cn(\n              'button',\n              'is-warning',\n              { 'is-light': !isReversed },\n            )\n          }\n          onClick={() => setIsReversed(!isReversed)}\n        >\n          Reverse\n        </button>\n\n        {isResetButton && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setSortBy(SortType.RESET);\n              setIsReversed(false);\n            }}\n          >\n            Reset\n          </button>\n        )}\n\n      </div>\n\n      <ul>\n        <ul>\n          {visibleGoods.map(good => (\n            <li data-cy=\"Good\" key={good}>{good}</li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}